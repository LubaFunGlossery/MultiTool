class SettingsMenu:
    def __init__(self):
        self.settings = {
            "Enable Logging": True,
            "Log Level": "INFO",  # Options: DEBUG, INFO, WARNING, ERROR
            "Output Directory": "./logs",
            "Auto-Update": True,
            "Network Timeout": 30,  # seconds
        }

    def display_menu(self):
        print("=== Settings Menu ===")
        for idx, (key, value) in enumerate(self.settings.items(), start=1):
            print(f"{idx}. {key}: {value}")
        print("0. Save and Exit")
        print("=====================")

    def update_setting(self, choice):
        if choice in range(1, len(self.settings) + 1):
            setting_name = list(self.settings.keys())[choice - 1]
            new_value = input(f"Enter new value for {setting_name} (current: {self.settings[setting_name]}): ")
            if new_value.lower() in ["true", "false"]:
                self.settings[setting_name] = new_value.lower() == "true"
            elif setting_name == "Log Level" and new_value in ["DEBUG", "INFO", "WARNING", "ERROR"]:
                self.settings[setting_name] = new_value
            elif setting_name == "Network Timeout" and new_value.isdigit():
                self.settings[setting_name] = int(new_value)
            else:
                self.settings[setting_name] = new_value
            print(f"{setting_name} updated to {self.settings[setting_name]}.")
        else:
            print("Invalid choice. Please try again.")

    def save_settings(self):
        # Here, implement saving to a config file or database
        print("Settings saved successfully.")

    def run(self):
        while True:
            self.display_menu()
            choice = int(input("Choose an option: "))
            if choice == 0:
                self.save_settings()
                break
            self.update_setting(choice)


if __name__ == "__main__":
    settings_menu = SettingsMenu()
    settings_menu.run()
